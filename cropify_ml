import streamlit as st
 
# Set page configuration
st.set_page_config(page_title="Cropify", page_icon="ðŸŒ¾", layout="centered")

# Title and description
st.title("ðŸŒ¾ Cropify â€“ Smart Crop Recommender")
st.markdown("Enter the soil and climate parameters below to get the best crop suggestion powered by AI.")

# Sidebar input fields in two columns
with st.form("crop_form"):
    st.subheader("ðŸ“Š Input Parameters")
    col1, col2 = st.columns(2)

    with col1:
        nitrogen = st.number_input("Nitrogen (N)", min_value=0, max_value=200, value=50)
        phosphorus = st.number_input("Phosphorus (P)", min_value=0, max_value=200, value=50)
        potassium = st.number_input("Potassium (K)", min_value=0, max_value=200, value=50)
        ph = st.number_input("Soil pH", min_value=0.0, max_value=14.0, value=6.5)

    with col2:
        temperature = st.number_input("Temperature (Â°C)", min_value=0.0, max_value=60.0, value=25.0)
        humidity = st.number_input("Humidity (%)", min_value=0.0, max_value=100.0, value=60.0)
        rainfall = st.number_input("Rainfall (mm)", min_value=0.0, max_value=500.0, value=100.0)

    submitted = st.form_submit_button("ðŸŒ± Predict Crop")              

# Placeholder result section
if submitted:
    # ðŸš€ Replace this block with actual model prediction
    # e.g. result = model.predict([[...]])
    mock_result = "Wheat"  # Hardcoded for now
    st.success(f"âœ… Recommended Crop: **{mock_result}**")
    st.balloons()

#RANDOM FOREST(TRAINING AND SAVING)
# train_rf_model.py
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
import joblib

# Load your dataset
data = pd.read_csv("crop_dataset.csv")  # Ensure this CSV file is in your working directory

# Separate features and target
X = data.drop("label", axis=1)  # Features
y = data["label"]               # Target variable

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the Random Forest Classifier
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)

# Train the model
rf_model.fit(X_train, y_train)

# Save the trained model to a file
joblib.dump(rf_model, "rf_crop_model.pkl")
print("âœ… Random Forest model trained and saved as 'rf_crop_model.pkl'")

#INTEGRATION OF MODEL IN THE STREAMLIT APP (RANDOM FOREST)
# cropii.py
import streamlit as st
import joblib
import numpy as np

# Load the trained Random Forest model
model = joblib.load("rf_crop_model.pkl")

# Set up the Streamlit app
st.title("ðŸŒ¾ Cropify - Smart Crop Recommendation")

# Create sliders for user input
nitrogen = st.slider("Nitrogen (N)", 0, 140, 70)
phosphorus = st.slider("Phosphorus (P)", 5, 145, 60)
potassium = st.slider("Potassium (K)", 5, 205, 65)
temperature = st.slider("Temperature (Â°C)", 10, 45, 25)
humidity = st.slider("Humidity (%)", 10, 100, 60)
ph = st.slider("Soil pH", 3.5, 9.5, 6.5)
rainfall = st.slider("Rainfall (mm)", 20.0, 300.0, 100.0)

# Predict the optimal crop when the button is clicked
if st.button("ðŸŒ± Predict Optimal Crop"):
    # Prepare the input data as a 2D array
    input_data = np.array([[nitrogen, phosphorus, potassium, temperature, humidity, ph, rainfall]])
    
    # Make the prediction
    prediction = model.predict(input_data)[0]
    
    # Display the result
    st.success(f"âœ… Recommended Crop: **{prediction}**")





 
